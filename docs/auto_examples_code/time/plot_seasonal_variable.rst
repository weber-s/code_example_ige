

.. _sphx_glr_auto_examples_code_time_plot_seasonal_variable.py:


Add season DataFrame and categorical plot
=========================================

Add season (DJF, MAM, JJA, SON) to an existing dataframe then use seaborn to
plot distribution of value grouping by season.


This example cover the following basic:

    - group a dataframe by season
    - plot seasonal distribution of a variable




.. code-block:: python


    import pandas as pd

    # Load some atmospheric PM concentration at Grenoble Les Frenes from 2007 to 2018
    csv_file = 'https://gist.githubusercontent.com/weber-s/4451562bb408fbfafc7b80520faa0773/raw/1989bcbc19894aad99feeb0f12dd1b36b8380960/PM_GRE-fr'
    df = pd.read_csv(csv_file)

    # Let's have a look at what is inside
    print(df.head())





.. rst-class:: sphx-glr-script-out

 Out::

    PMrecons Particle size        date station
    0  25.31859          PM10  2007-12-18  GRE-fr
    1  37.30408          PM10  2007-12-20  GRE-fr
    2  37.56801          PM10  2007-12-21  GRE-fr
    3  50.50939          PM10  2007-12-22  GRE-fr
    4  52.45696          PM10  2007-12-23  GRE-fr


We want "date" as a date. So we convert it to datetime object



.. code-block:: python


    df["date"] = pd.to_datetime(df["date"])

    # Set the date as index
    df.set_index('date', inplace=True, drop=True)







Now, we wan't to group it by season: DJF, MAM, JJA, SON. Even if a date object
has a lot of attribut (.day, .month, .year, etc), it does have a .season.
Mostly because what we call "season" change from people to people and place to
place. We then have to construct it ourself.

This function is copy-pastable, so some extra work are done (check for index,
type of date, etc).



.. code-block:: python


    def add_season(df):
        """
        Add a season column to the DataFrame df.

        parameters
        ----------
    
        df: Pandas DataFrame.
            The DataFrame to work with.

        return
        ------

        dfnew: a new pandas DataFrame with a 'season' columns.
    
        """
    
        month_to_season = {1:'DJF', 2:'DJF', 3:'MAM', 4:'MAM', 5:'MAM', 6:'JJA',
                           7:'JJA', 8:'JJA', 9:'SON', 10:'SON', 11:'SON', 12:'DJF'}
    
        dfnew = df.copy()

        # ensure we have date in index
        if isinstance(dfnew.index, pd.DatetimeIndex):
            dfnew["date"] = dfnew.index        
        elif 'date' in dfnew.columns:
            dfnew["date"] = pd.to_datetime(dfnew["date"])
        else:
            print("No date given")
            return
    
        # add a new column with the number of the month (Jan=1, etc)
        dfnew["month"] = dfnew.date.apply(lambda x: x.month)
        # sort it. This is not mandatory.
        dfnew.sort_values(by="month", inplace=True)

        # add the season base on the month number
        dfnew["season"] = dfnew["month"].replace(month_to_season)

        # and return the new dataframe
        return dfnew







Now we can use this function to add a 'season' and 'month' column to our
dataframe.



.. code-block:: python


    df = add_season(df)

    print(df.head())





.. rst-class:: sphx-glr-script-out

 Out::

    PMrecons Particle size station       date  month season
    date                                                               
    2012-01-02  20.53204          PM10  GRE-fr 2012-01-02      1    DJF
    2016-01-11   4.15967          PM10  GRE-fr 2016-01-11      1    DJF
    2009-01-29  36.87002          PM10  GRE-fr 2009-01-29      1    DJF
    2009-01-28  22.75429          PM10  GRE-fr 2009-01-28      1    DJF
    2009-01-27  16.51262          PM10  GRE-fr 2009-01-27      1    DJF


Note that now, our dataframe has 2 new columns: 'month' and 'season'.
We then use the `seaborn` library to plot categorical data, for instance the
boxplot per season of PM.



.. code-block:: python


    import seaborn as sns
    import matplotlib.pyplot as plt

    sns.boxplot(data=df, x='season', y='PMrecons')

    plt.show()




.. image:: /auto_examples_code/time/images/sphx_glr_plot_seasonal_variable_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  2.121 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_seasonal_variable.py <plot_seasonal_variable.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_seasonal_variable.ipynb <plot_seasonal_variable.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
